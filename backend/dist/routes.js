"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const CreateUserController_1 = require("./controller/user/CreateUserController");
const AuthUserController_1 = require("./controller/user/AuthUserController");
const DetailUserController_1 = require("./controller/user/DetailUserController");
const isAuthenticated_1 = require("./middlewares/isAuthenticated");
const CreateOrderController_1 = require("./controller/order/CreateOrderController");
const AddItemController_1 = require("./controller/order/AddItemController");
const DeleteOrderController_1 = require("./controller/order/DeleteOrderController");
const DeleteItemController_1 = require("./controller/order/DeleteItemController");
const EditOrderController_1 = require("./controller/order/EditOrderController");
const EditItemController_1 = require("./controller/order/EditItemController");
const ListOrdersController_1 = require("./controller/order/ListOrdersController");
const ListItensController_1 = require("./controller/order/ListItensController");
const DetailOrderController_1 = require("./controller/order/DetailOrderController");
const router = (0, express_1.Router)();
exports.router = router;
router.post("/users", new CreateUserController_1.CreateUserController().handle);
router.post("/session", new AuthUserController_1.AuthUserController().handle);
router.get("/me", isAuthenticated_1.isAuthenticated, new DetailUserController_1.DetailUserController().handle);
router.post("/orders", isAuthenticated_1.isAuthenticated, new CreateOrderController_1.CreateOrderController().handle);
router.delete("/orders", isAuthenticated_1.isAuthenticated, new DeleteOrderController_1.DeleteOrderController().handle);
router.post("/orders/itens", isAuthenticated_1.isAuthenticated, new AddItemController_1.AddItemController().handle);
router.delete("/orders/itens", isAuthenticated_1.isAuthenticated, new DeleteItemController_1.DeleteItemController().handle);
router.put("/orders", isAuthenticated_1.isAuthenticated, new EditOrderController_1.EditOrderController().handle);
router.put("/orders/itens", isAuthenticated_1.isAuthenticated, new EditItemController_1.EditItemController().handle);
router.get("/orders", isAuthenticated_1.isAuthenticated, new ListOrdersController_1.ListOrdersController().handle);
router.get("/orders/itens", isAuthenticated_1.isAuthenticated, new ListItensController_1.ListItensController().handle);
router.get("/order", isAuthenticated_1.isAuthenticated, new DetailOrderController_1.DetailOrderController().handle);
